name: Wildfly s2i Image Deployment
on: ['deployment']
env:
  LANG: en_US.UTF-8
  S2I_URI: https://api.github.com/repos/openshift/source-to-image/releases/latest
  CEKIT_VERSION: 3.2.1
  QUAY_REPO: ${{ secrets.QUAY_REPO }}
  QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
  REPO: wildfly/wildfly-s2i
  REF: master
  NAMESPACE: wildfly
  PLATFORM: centos7
  IMAGE_NAME: wildfly-${PLATFORM}
  RUNTIME_IMAGE_NAME: wildfly-runtime-${PLATFORM}
  IMAGE_TAG: latest
jobs:
  wfci:
    name: Wildfly-s2i Build, Test and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Extract payload variables
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{github.token}}
          script: |
            const core = require('@actions/core')
            const repo = context.payload.repo
            core.exportVariable('REPO', repo)
            const ref = context.payload.ref
            core.exportVariable('REF', ref)
            const img_tag = context.payload.image_tag
            core.exportVariable('IMAGE_TAG', img_tag)
      - uses: actions/checkout@v2
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Deployment pending'
        uses: 'deliverybot/status@70e18b94326d2119355ad60dbc3c0a8329241b90'
        with:
          state: 'pending'
          token: '${{ secrets.GITHUB_TOKEN }}'
      - name: Check quay.io configuration
        if: env.QUAY_USERNAME == '' || env.QUAY_REPO == ''
        run: |
          echo "quay.io configuration is incomplete, push to quay.io will be skipped. If you wish to push built images to quay.io, please ensure the secrets QUAY_REPO, QUAY_USERNAME and QUAY_PASSWORD are created in the project."
      - name: Setup required system packages
        run: |
          sudo apt-get update
          sudo apt-get install krb5-multidev
      - name: Verify latest centos image is present
        run: |
          docker image ls | grep centos || true
          docker pull centos:7
          docker pull centos/s2i-base-centos7
          docker image ls | grep centos
      - name: Setup virtualenv and install cekit and required packages
        run: |
          sudo pip install virtualenv
          mkdir ~/cekit${{ env.CEKIT_VERSION }}
          virtualenv ~/cekit${{ env.CEKIT_VERSION }}
          . ~/cekit${{ env.CEKIT_VERSION }}/bin/activate
          pip install cekit==${{ env.CEKIT_VERSION }} docker docker-squash odcs behave lxml
      - name: install s2i binary
        run: |
          echo ===== Installing s2i from ${{ env.S2I_URL }} =====
          mkdir /tmp/s2i/ && cd /tmp/s2i/
          curl -s ${{ env.S2I_URI }} \
           | grep browser_download_url \
           | grep linux-amd64 \
           | cut -d '"' -f 4 \
           | wget -qi -
           tar xvf source-to-image*.gz
           sudo mv s2i /usr/bin
           which s2i
           s2i version
      - name: Build 
        run: |
          . ~/cekit${{ env.CEKIT_VERSION }}/bin/activate
          make
          docker image ls
      - name: Behave Tests
        run: |
          . ~/cekit${{ env.CEKIT_VERSION }}/bin/activate
          pushd wildfly-builder-image
          cekit -v test behave
          popd
      - name: Additional Tests
        run: |
          . ~/cekit${{ env.CEKIT_VERSION }}/bin/activate
          ./test/run
      - name: Push to quay.io
        if: env.QUAY_USERNAME != '' && env.QUAY_REPO != ''
        run: |
            echo QUAY_REPO: "${{ secrets.QUAY_REPO }}"
            echo BUILDER_IMAGE: ${{ env.IMAGE_NAME }}
            echo RUNTIME_IMAGE: ${{ env.RUNTIME_IMAGE_NAME }}
            echo Pushing to quay.io with the tag ${{ env.IMAGE_TAG }}
            BUILDER_IMAGE="quay.io/${{ secrets.QUAY_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            RUNTIME_IMAGE="quay.io/${{ secrets.QUAY_REPO }}/${{ env.RUNTIME_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            docker login -u="${{ secrets.QUAY_USERNAME }}" -p="${{ secrets.QUAY_PASSWORD }}" quay.io
            docker tag ${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${BUILDER_IMAGE}
            docker push ${BUILDER_IMAGE}
            docker tag ${{ env.NAMESPACE }}/${{ env.RUNTIME_IMAGE_NAME}}:${{ env.IMAGE_TAG}} ${RUNTIME_IMAGE}
            docker push ${RUNTIME_IMAGE}
      - name: 'deployment success'
        if: success()
        uses: 'deliverybot/status@70e18b94326d2119355ad60dbc3c0a8329241b90'
        with:
          state: 'success'
          token: '${{ secrets.GITHUB_TOKEN }}'
      - name: 'deployment failure'
        if: failure()
        uses: 'deliverybot/status@70e18b94326d2119355ad60dbc3c0a8329241b90'
        with:
          state: 'failure'
          token: '${{ secrets.GITHUB_TOKEN }}'
